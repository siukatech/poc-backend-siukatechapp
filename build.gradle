plugins {
//	id 'java'
//	id 'java-platform'
	id 'java-library'
//	id 'org.springframework.boot' version '3.1.0' apply false
//	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.springframework.boot' version '3.2.1' apply false
	id 'maven-publish'
}
apply plugin: 'io.spring.dependency-management'

// https://stackoverflow.com/a/55731664
dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

group = 'com.siukatech.poc'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = "17"
}

repositories {
	mavenCentral()
}

dependencies {
//	// Use JUnit Jupiter for testing.
//	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
//
//	// This dependency is exported to consumers, that is to say found on their compile classpath.
//	api 'org.apache.commons:commons-math3:3.6.1'
//
//	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
//	implementation 'com.google.guava:guava:31.1-jre'

	api 'org.springframework.boot:spring-boot-starter-data-jpa'
	api 'org.springframework.boot:spring-boot-starter-oauth2-client'
	api 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	api 'org.springframework.boot:spring-boot-starter-security'
	api 'org.springframework.boot:spring-boot-starter-web'

	api 'org.modelmapper:modelmapper:3.1.1'
	api 'org.hibernate:hibernate-validator:6.0.13.Final'
//	api 'com.google.code.gson:gson:2.10.1'
	api 'org.apache.commons:commons-lang3:3.12.0'
	api 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
//	api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
////	api 'org.apache.httpcomponents:httpclient:4.5.13'
//	api 'org.apache.httpcomponents.client5:httpclient5:5.2.2'
	api 'org.apache.httpcomponents.core5:httpcore5:5.2.4'

	api 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2:2.1.214'
//	testImplementation 'org.simplify4u:slf4j2-mock:2.3.0'
}

//jar {
////	enabled = false
////	enabled = true
//	archiveClassifier = '' //use empty string
//}

//bootJar {
//	enabled = false
//}


// after upgrade to springboot >= 3.2.1
// this can be fixed by update build.gradle or adding maven plugin
// https://stackoverflow.com/a/77691302
// https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention
tasks.withType(JavaCompile).configureEach {
	options.compilerArgs.add("-parameters")
}

tasks.named('test') {
	useJUnitPlatform()
}


// disable publishing for jenkins testing
//publishing {
//	publications {
//		privateMaven(MavenPublication) {
//			def artifactIdStr = "$project.name"
//			groupId "$project.group"
//			version "$project.version"
//			artifactId "$artifactIdStr"
////			from components.javaPlatform
//			from components.java
//			versionMapping {
//				usage('java-api') {
//					fromResolutionOf('runtimeClasspath')
//				}
//				usage('java-runtime') {
//					fromResolutionResult()
//				}
//			}
//			pom {
//				name = "$artifactId"
//				description = "$artifactId"
//			}
//
//		}
//	}
//	repositories {
//		maven {
//			name = 'platformSnapshot'
//			allowInsecureProtocol = true
//			credentials(PasswordCredentials)
//			url = uri("$platformSnapshotUri")
//		}
//	}
//}
// disable publishing for jenkins testing


//configurations {
//	instrumentedJars {
//		canBeConsumed = true
//		canBeResolved = false
//		// If you want this configuration to share the same dependencies, otherwise omit this line
//		extendsFrom implementation, runtimeOnly
//	}
//}
//
//artifacts {
//	instrumentedJars(jar)
//}

//task fatJar(type: Jar) {
////	archiveClassifier = 'all'
////	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//	from sourceSets.main.output
//	dependsOn configurations.runtimeClasspath
//	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//	from { configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) } }
//	println("fatJar")
//	with jar
//}
targetCompatibility = JavaVersion.VERSION_17
