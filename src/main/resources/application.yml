

spring:
#
#  jpa:
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#        ddl-auto: none
#        show-sql: true
#        format-sql: true
#
#  datasource:
#    url: jdbc:postgresql://localhost:25432/toydb
#    username: toy_web
#    #password: ${POSTGRES_PASSWORD:mypass}
#    password: mypass
#    initialization-mode: always
#    initialize: true
#    bak-schema: classpath:/schema.sql
#    continue-on-error: true

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${client-id}
            client-secret: ${client-secret}
            authorization-grant-type: authorization_code
            scope: openid,profile,email
            redirect-uri: ${oauth2-client-redirect-uri}

        provider:
          keycloak:
            authorization-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/auth
            token-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/token
            user-info-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/userinfo
            issuer-uri: ${oauth2-client-keycloak}/realms/${client-realm}
            jwk-set-uri: ${oauth2-client-keycloak}/realms/${client-realm}/protocol/openid-connect/certs
            user-name-attribute: preferred_username
#            user-info-authentication-method:

      resource-server:
        jwt:
          issuer-uri: ${oauth2-client-keycloak}/realms/${client-realm}

app:
  host-name: --
  api:
    my-user-info: /v1/protected/my/user-info
    my-key-info: /v1/protected/my/key-info


logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
#    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.web: TRACE
    com.siukatech.poc.react.backend.parent: TRACE


